// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id_cliente Int         @id @default(autoincrement())
  Nombres    String      @db.VarChar(50)
  Apellidos  String      @db.VarChar(50)
  Email      String      @unique @db.VarChar(50)
  contraseña Bytes       @db.VarBinary(250)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?
  
  // Relaciones
  telefonos    Telefono[]
  direcciones  Direccion[]
  pedidos      Pedido[]
  pagos        Pago[]

  @@map("cliente")
}

model Telefono {
  id_telefono     Int      @id @default(autoincrement())
  númeroTelefono  String   @db.VarChar(10)
  tipo            String   @db.VarChar(15)
  id_cliente      Int
  cliente         Cliente  @relation(fields: [id_cliente], references: [id_cliente], onDelete: Cascade)

  @@map("Telefono")
}

model Direccion {
  id_Direcipón Int      @id @default(autoincrement())
  barrio       String   @db.VarChar(50)
  calle        String   @db.VarChar(50)
  numero       String   @db.VarChar(50)
  id_cliente   Int
  cliente      Cliente  @relation(fields: [id_cliente], references: [id_cliente], onDelete: Cascade)

  @@map("Direccion")
}

model Pedido {
  id_pedido        Int      @id @default(autoincrement())
  estado_pedido    String   @db.VarChar(50)
  fecha_pedido     DateTime @db.Date
  total_pago       Decimal  @db.Decimal(10, 2)
  id_cliente       Int
  id_administrador Int
  cliente          Cliente         @relation(fields: [id_cliente], references: [id_cliente], onDelete: Cascade)
  administrador    Administrador   @relation(fields: [id_administrador], references: [id_administrador], onDelete: Cascade)
  pagos            Pago[]
  productos        PedidoProducto[]

  @@map("Pedido")
}

model Pago {
  ID_pagos     Int      @id @default(autoincrement())
  monto_pago   Decimal  @db.Decimal(10, 2)
  metodo_pago  String   @db.VarChar(50)
  estado_pago  String   @db.VarChar(50)
  id_pedido    Int
  id_cliente   Int
  pedido       Pedido   @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade)
  cliente      Cliente  @relation(fields: [id_cliente], references: [id_cliente], onDelete: Cascade)

  @@map("Pagos")
}

model Administrador {
  id_administrador Int      @id @default(autoincrement())
  Nombres          String   @db.VarChar(50)
  Apellidos        String   @db.VarChar(50)
  Email            String   @unique @db.VarChar(50)
  contraseña       String   @db.VarChar(250)
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
  pedidos          Pedido[]

  @@map("Administrador")
}

model Inventario {
  id_inventario    Int       @id @default(autoincrement())
  cantidad         Int
  fechaIngreso     DateTime  @db.Date
  fechaSalida      DateTime  @db.Date
  fechaRealización DateTime  @db.Date
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  productos        Producto[]

  @@map("Inventario")
}

model Proveedor {
  id_proveedor Int       @id @default(autoincrement())
  nombres      String    @db.VarChar(50)
  apellidos    String    @db.VarChar(50)
  Email        String    @unique @db.VarChar(50)
  contraseña   Bytes     @db.VarBinary(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  productos    Producto[]

  @@map("Proveedor")
}

model Producto {
  id_producto   Int       @id @default(autoincrement())
  nombreP       String    @db.VarChar(50)
  tipo          String    @db.VarChar(50)
  Precio        Decimal   @db.Decimal(10, 2)
  imagen        Bytes?
  id_inventario Int?
  id_proveedor  Int?
  inventario    Inventario? @relation(fields: [id_inventario], references: [id_inventario], onDelete: Cascade)
  proveedor     Proveedor?  @relation(fields: [id_proveedor], references: [id_proveedor], onDelete: Cascade)
  pedidos       PedidoProducto[]

  @@map("Producto")
}

model PedidoProducto {
  id_pedido   Int
  id_producto Int
  cantidad    Int
  pedido      Pedido   @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade)
  producto    Producto @relation(fields: [id_producto], references: [id_producto], onDelete: Cascade)

  @@id([id_pedido, id_producto])
  @@map("Pedido_producto")
}

model PaymentPreference {
  id_pago           String   @id @db.VarChar(36)
  preference_id     String   @unique @db.VarChar(255)
  items             String   @db.Text
  payer             String   @db.Text
  status            String   @db.VarChar(50)
  fecha_creacion    DateTime @default(now())
  fecha_actualizacion DateTime?

  @@map("payment_preferences")
} 